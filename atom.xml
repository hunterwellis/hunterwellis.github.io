<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Hunter Ellis</title>
    <subtitle>portfolio website</subtitle>
    <link rel="self" type="application/atom+xml" href="https://hunterwellis.github.io/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://hunterwellis.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-06-06T00:00:00+00:00</updated>
    <id>https://hunterwellis.github.io/atom.xml</id>
    <entry xml:lang="en">
        <title>One Year using Linux</title>
        <published>2025-06-06T00:00:00+00:00</published>
        <updated>2025-06-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://hunterwellis.github.io/posts/one-year-on-linux/"/>
        <id>https://hunterwellis.github.io/posts/one-year-on-linux/</id>
        
        <content type="html" xml:base="https://hunterwellis.github.io/posts/one-year-on-linux/">&lt;p&gt;It&#x27;s hard to believe that one year ago I was a Windows&#x27; user. Especially, considering the hard time I give my friends for using Windows nowadays.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;making-the-switch&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#making-the-switch&quot; aria-label=&quot;Anchor link for: making-the-switch&quot;&gt;Making the Switch&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Initially, I switched to Linux to work on my Master&#x27;s thesis in robotics, which required ROS2 (which is most compatible with Ubuntu). Now, I could have easily used Docker or some other platform to virtualize my problems away, but I had taken an &lt;a href=&quot;https:&#x2F;&#x2F;ece.vt.edu&#x2F;undergrad&#x2F;courses&#x2F;2524.html&quot;&gt;Intro to Unix&lt;&#x2F;a&gt; course at my university with some friends and was pretty fed-up with the headaches of using Windows. As such I gave up any chance of having a healthy relationship with technology and I entered the rabbit-hole.&lt;&#x2F;p&gt;
&lt;center&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;ubuntu_noble_numbat.png&quot; height=&quot;350&quot; width=auto &gt;
&lt;&#x2F;center&gt;
&lt;p&gt;Luckily for me I made the decision to switch during the summer and the Company I was an intern for lent me a Windows laptop, so I had a decently large margin of time to deal wth the learning curves that come with installing Linux on bare-metal.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;things-just-work&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#things-just-work&quot; aria-label=&quot;Anchor link for: things-just-work&quot;&gt;Things Just Work!?&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Upon switching I immediately noticed that &lt;em&gt;things just work&lt;&#x2F;em&gt; on Linux. If I needed to install an application, a framework, or a tool the package manager was there to save the day. (No more dealing with MinGW, GCC comes preinstalled.) Maybe it sounds strange to say that &quot;&lt;em&gt;things just work&lt;&#x2F;em&gt;&quot;--I mean that is how it is supposed to bej after all, but coming from Windows where it feels like youre OS is constantly battling you this was huge.&lt;&#x2F;p&gt;
&lt;p&gt;I remember just trying to install Qt5 on Windows was a headache, navigating convoluted GUIs, setting Window&#x27;s environment PATH, restarting my computer, and constanly validating Windows that: &quot;yes, I am absolutely sure I want to do this&quot;. On the other hand on Linux this was as easy as: &lt;code&gt;apt install qt5-default&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;center&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;limitless.gif&quot; height=&quot;350&quot; width=auto &gt;
&lt;&#x2F;center&gt;
&lt;center&gt;
    &lt;i&gt;
        How it feels writing a &lt;code&gt;Hello World!&lt;&#x2F;code&gt; program in Vim.
    &lt;&#x2F;i&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;Of course this power comes with responsibilty. Within the first week while trying to &lt;code&gt;rm&lt;&#x2F;code&gt; a directory I ran &lt;code&gt;sudo rm -r .&#x2F;*&lt;&#x2F;code&gt; from the wrong directory and ended up deleting all of my unbacked-up configuration files.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;configuration-and-workflow&quot;&gt;&lt;a class=&quot;zola-anchor&quot; href=&quot;#configuration-and-workflow&quot; aria-label=&quot;Anchor link for: configuration-and-workflow&quot;&gt;Configuration and Workflow&lt;&#x2F;a&gt;&lt;&#x2F;h1&gt;
&lt;p&gt;Since, switching to Linux I have adopted a number of different technologies and configurations that have been amazing for my productivity and streamlining my workflow. However, maybe more important than increasing productivity, these optimizations just made the process of working from my computer more enjoyable.&lt;&#x2F;p&gt;
&lt;center&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;linux_rice.png&quot; height=&quot;350&quot; width=auto &gt;
&lt;&#x2F;center&gt;
&lt;center&gt;
    &lt;i&gt;
        My current Linux desktop environment and neovim.
    &lt;&#x2F;i&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;I set up a custom configurations for polybar, i3, jgmenu, etc. that make my desktop environment feel super smooth, and allow me to not even have a mouse on my desk. Additionally, I recently jumped off the deepend and started using Vim as my main text-editor which has made my workflow feel even more clean. Now, when I &lt;code&gt;ssh&lt;&#x2F;code&gt; into a server I work pretty much the same as if I were on my own setup.&lt;&#x2F;p&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
&lt;br&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Radical AIâ€”Skills Demo</title>
        <published>2025-05-28T00:00:00+00:00</published>
        <updated>2025-05-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://hunterwellis.github.io/ur3e-lab/"/>
        <id>https://hunterwellis.github.io/ur3e-lab/</id>
        
        <content type="html" xml:base="https://hunterwellis.github.io/ur3e-lab/">&lt;h1 id=&quot;what-is-this&quot;&gt;What is this?&lt;&#x2F;h1&gt;
&lt;p&gt;This project includes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;ROS2 digital twin for visualization of the UR3e arm.&lt;&#x2F;li&gt;
&lt;li&gt;Qt dashboard for monitoring robot telemetry data.&lt;&#x2F;li&gt;
&lt;li&gt;Instrumentation integration example.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;why&quot;&gt;Why?&lt;&#x2F;h1&gt;
&lt;p&gt;I think that the work being done at Radical AI is awesome and I would love to be a part of it. I built and designed these projects over the last two days as a skills demo.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;digital-twin&quot;&gt;Digital Twin&lt;&#x2F;h1&gt;
&lt;p&gt;Here I built a quick software-based digital twin of a Universal Robots UR3e robotic arm for detecting errors, collecting hardware data, and remote monitoring. This twin visualizes the robot&#x27;s real-time joint positions, servo torques, tool center point (TCP), and any other sensor feedback--providing a live, interactive model of what the robot is doing at any moment in the lab. I wrote this in Python and C++.&lt;&#x2F;p&gt;
&lt;img src=&quot;&#x2F;images&#x2F;ur3e.png&quot; height=&quot;400&quot; width=auto style=&quot;float: left; margin-left: 175; margin-right: auto; display: block;&quot;&gt;
&lt;img src=&quot;&#x2F;images&#x2F;ur3e_robotiq.png&quot; height=&quot;400&quot; width=auto style=&quot;float: right; margin-left: auto; margin-right: 150; display: block;&quot;&gt;
&lt;div style=&quot;clear: both;&quot;&gt;&lt;&#x2F;div&gt;
&lt;center&gt;
    &lt;i&gt;Digital Twin&lt;&#x2F;i&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;This digital twin system can integrate into a larger laboratory twin providing fault detection, data collection, and remote monitoring for the whole laboratory.&lt;&#x2F;p&gt;
&lt;p&gt;A headless Gazebo Harmonic sim was set up to simulate the motor joint torques.&lt;&#x2F;p&gt;
&lt;center&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;gazebo.png&quot; height=&quot;400&quot; width=auto alt=&quot;ur3e rviz&quot;&gt;
    &lt;br&gt;
    &lt;i&gt;Gazebo Sim&lt;&#x2F;i&gt;
&lt;&#x2F;center&gt;
&lt;h2 id=&quot;visualization&quot;&gt;Visualization&lt;&#x2F;h2&gt;
&lt;p&gt;Visualization of the digital twin is handled in RViz, this integrates nicely with ROS2. Through the Qt GUI users can toggle between the real position given via real telemetry data from the lab and the simulated&#x2F;projected trajectory.&lt;&#x2F;p&gt;
&lt;center&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;ur3e_rviz.png&quot; height=&quot;400&quot; width=auto alt=&quot;ur3e rviz&quot;&gt;
    &lt;br&gt;
    &lt;i&gt;UR3e + Robotiq Gripper (RViz)&lt;&#x2F;i&gt;
&lt;&#x2F;center&gt;
&lt;h2 id=&quot;qt-dashboard&quot;&gt;Qt Dashboard&lt;&#x2F;h2&gt;
&lt;p&gt;The planned trajectory and telemetry data is displayed in real-time for monitoring. Error values are also computed and error margins can easily be defined and detected. The Qt Dashboard also allows the user to toggle between visualization of the planned and actual trajectory along with a dropdown menu to select the parameter they would like to monitor. Data is timestamped and stored in a CSV file for post-processing and logging.&lt;&#x2F;p&gt;
&lt;p&gt;Of course, I can only simulate the telemetry data here.&lt;&#x2F;p&gt;
&lt;center&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;dashboard.png&quot; alt=&quot;ur3e dashboard&quot;&gt;
    &lt;br&gt;
    &lt;i&gt;UR3e Qt dashboard (left) with RViz (right)&lt;&#x2F;i&gt;
&lt;&#x2F;center&gt;
&lt;h1 id=&quot;sensor-integration&quot;&gt;Sensor Integration&lt;&#x2F;h1&gt;
&lt;p&gt;It is necessary for an autonomous laboratory to incorporate many sensors to ensure accurate estimation of the lab&#x27;s state. I believe that my knowledge of signal processing on both the analog and digital side can be a valuable addition to Radical&#x27;s team.&lt;&#x2F;p&gt;
&lt;script src=https:&#x2F;&#x2F;hunterwellis.github.io&#x2F;js&#x2F;mermaid.js&gt;&lt;&#x2F;script&gt;

&lt;pre class=&quot;mermaid&quot;&gt;
  graph LR 
    %% Analog Subgraph
    subgraph Analog
        A(Sensor) --&gt; B(Signal&lt;br&gt;Conditioning)
        B --&gt; C(Low-pass filter)
    end
    %% Digital Subgraph
    subgraph Digital
        C --&gt; D(ADC)
        D --&gt; E(Digital Filter)
        E --&gt; F(Processed Data)
        C --&gt; G(Raw Data)
    end
    style Digital fill:#ddd,stroke:#333
    style Analog fill:#ddd,stroke:#333
    style F fill:#6f6,stroke:#333
    style G fill:#6f6,stroke:#333
&lt;&#x2F;pre&gt;
&lt;center&gt;
    &lt;i&gt;Typical signal processing pipeline&lt;&#x2F;i&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;Here I designed the analog and digital circuitry necessary to read from a photodiode. While photodiodes are probably not relevant to the work being done now I imagine they will be when measuring electromagnetic waves is necessary, additionally they require a more complex analog filtering stage compared many other sensors which would be good to demonstrate my skills in both analog and digital electronics.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;analog-stage&quot;&gt;Analog Stage&lt;&#x2F;h2&gt;
&lt;p&gt;Here is the analog stage I designed to amplify the current signal and attenuate signal aliasing. These schematics were captured in KiCAD and validated in SPICE simulations.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;signal-conditioning&quot;&gt;Signal Conditioning&lt;&#x2F;h3&gt;
&lt;img src=&quot;&#x2F;images&#x2F;TIA_param.png&quot; alt=&quot;TIA&quot; height=&quot;400&quot; width=auto style=&quot;float: right; margin-left: 5&quot;&gt;
&lt;p&gt;Using a transimpedence amplifier to amplify the signal and turn it into a voltage signal. This can be defined with the following transfer function.&lt;&#x2F;p&gt;
&lt;p&gt;$$\frac{V_{out}(s)}{I_{ph}(s)} = \frac{-R_f}{1+sR_fC_f}$$
$$\Rightarrow H(s) = 1 + \frac{300k}{4.7k (1 + s * 300k * 27p)}$$&lt;&#x2F;p&gt;
&lt;div style=&quot;clear: both;&quot;&gt;&lt;&#x2F;div&gt;
&lt;i style=&quot;float: right&quot;&gt;Direct Form II Block Diagram (Second Order)&lt;&#x2F;i&gt;
&lt;h3 id=&quot;anti-aliasing&quot;&gt;Anti-Aliasing&lt;&#x2F;h3&gt;
&lt;p&gt;Here is Sallen-Key low-pass filter at a cutoff of ~15kHz that functions as the last stage before discretizing the signal via the ADC.&lt;&#x2F;p&gt;
&lt;center&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;AA_filter.png&quot; alt=&quot;TIA&quot; height=&quot;400&quot; width=auto&gt;
&lt;&#x2F;center&gt;
$$f_c = \frac{1}{2\pi R_5C_5R_6C_6} \approx 14.5k$$
&lt;p&gt;Both of these circuits were validated in a SPICE simulation.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;digital-stage&quot;&gt;Digital Stage&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;iir-filter&quot;&gt;IIR Filter&lt;&#x2F;h3&gt;
&lt;p&gt;After sampling from the ADC, the digital stage consists of a direct form II implementation of a lowpass IIR Butterworth filter designed in MATLAB and implemented in C.&lt;&#x2F;p&gt;
&lt;center&gt;
    &lt;img src=&quot;&#x2F;images&#x2F;dfII.png&quot; alt=&quot;Direct Form II Block Diagram&quot; style=&quot;background-color:white&quot;&gt;
    &lt;br&gt;
    &lt;i&gt;Direct Form II Block Diagram (Second Order)&lt;&#x2F;i&gt;
&lt;&#x2F;center&gt;
&lt;p&gt;This development from DF I reduces memory usage and can be written as,&lt;&#x2F;p&gt;
&lt;p&gt;$$\omega(n) = x(n)-a_1\omega(n-1)-a_2\omega(n-2)-...$$
$$y(n) = b_0\omega(n)-b_1\omega(n-1)-b_2\omega(n-2)-...$$&lt;&#x2F;p&gt;
&lt;p&gt;where $\omega$ is the intermediate states.&lt;&#x2F;p&gt;
&lt;p&gt;Here is the implementation of a generalized IIR filter in C:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;C&quot; style=&quot;background-color:#fafafa;color:#61676c;&quot; class=&quot;language-C &quot;&gt;&lt;code class=&quot;language-C&quot; data-lang=&quot;C&quot;&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#f29718;&quot;&gt;iir_filter&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;float &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;w&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;index&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; w_new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; x&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; state
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; FILTER_ORDER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;i) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; idx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; FILTER_ORDER) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span&gt; FILTER_ORDER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        w_new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;-=&lt;&#x2F;span&gt;&lt;span&gt; a[i] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; w[idx]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; output
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt; y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; b[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; w_new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; FILTER_ORDER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;i) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; idx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt; FILTER_ORDER) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span&gt; FILTER_ORDER&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;        y &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;+=&lt;&#x2F;span&gt;&lt;span&gt; b[i] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; w[idx]&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; update state
&lt;&#x2F;span&gt;&lt;span&gt;    w[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;index] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; w_new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#abb0b6;&quot;&gt;&#x2F;&#x2F; update ring buffer
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;index&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;++
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;&amp;gt;=&lt;&#x2F;span&gt;&lt;span&gt; FILTER_ORDER){
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt;index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ed9366;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#ff8f40;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa6e32;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; y&lt;&#x2F;span&gt;&lt;span style=&quot;color:#61676ccc;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;!-- # Custom Desgined End-Effector --&gt;
&lt;h1 id=&quot;stepper-motors&quot;&gt;Stepper Motors&lt;&#x2F;h1&gt;
&lt;p&gt;I should also note that stepper motors can be easily integrated to the digital twin. For stepper position tracking a neodymium magnet can be attached to the motor shaft and the position value measured via a magnetic encoder.&lt;&#x2F;p&gt;
&lt;img src=&quot;&#x2F;images&#x2F;encoder_mount.png&quot; height=&quot;400&quot; width=auto style=&quot;float: left; margin-left: auto; margin-right: auto; display: block;&quot;&gt;
&lt;img src=&quot;&#x2F;images&#x2F;magnet_stepper.png&quot; height=&quot;400&quot; width=auto style=&quot;float: right; margin-left: auto; margin-right: auto; display: block;&quot;&gt;
&lt;div style=&quot;clear: both;&quot;&gt;&lt;&#x2F;div&gt;
&lt;center&gt;
    &lt;i&gt;3D printed encoder mount and neodymium magnet attachment.&lt;&#x2F;i&gt;
&lt;&#x2F;center&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Class Notes in LaTeX</title>
        <published>2024-11-09T00:00:00+00:00</published>
        <updated>2024-11-09T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://hunterwellis.github.io/posts/latex-notes/"/>
        <id>https://hunterwellis.github.io/posts/latex-notes/</id>
        
        <content type="html" xml:base="https://hunterwellis.github.io/posts/latex-notes/">&lt;p&gt;After graduating with my Bachelors from Virginia Tech in 2024 I had an internship doing Thrust Vector Controls at the &lt;a href=&quot;https:&#x2F;&#x2F;www.nasa.gov&#x2F;marshall&#x2F;&quot;&gt;Marshall Space Flight Center&lt;&#x2F;a&gt;. While working in the TVC branch it was necessary to draw on much of the knowledge I had learned in my control systems courses from my undergraduate studies â€“ this meant referencing textbooks and trying to track down lecture notes, which costed me lots of time and headache.&lt;&#x2F;p&gt;
&lt;p&gt;In an effort to avoid the same fate for my graduate studies, I decided to begin taking notes digitally. This takes a bit more time and effort than traditional pen an paper note taking, but these notes should last me throughout my career.
The formatting of my notes is heavily based on &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;SeniorMars&#x2F;dotfiles&#x2F;tree&#x2F;main&#x2F;latex_template&quot;&gt;SeniorMars&#x27; LaTeX template&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Here are some of the notes I have taken so far:&lt;&#x2F;p&gt;
&lt;embed src=&quot;&#x2F;pdfs&#x2F;als_notes.pdf&quot; type=&quot;application&#x2F;pdf&quot; width=100% height=1000px&gt;
</content>
        
    </entry>
</feed>
